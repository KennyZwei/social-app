{"version":3,"sources":["components/dialogs/messages/messages.module.css","components/dialogs/addMessage/addMessage.module.css","components/users/users.module.css","components/common/preloader/preloader.module.css","components/profile/profile.module.css","components/profile/addPost/addPost.module.css","components/profile/posts/posts.module.css","components/profile/profileInfo/profileInfo.module.css","components/common/textarea/textarea.module.css","commonStyle/button.module.css","components/navbar/navbar.module.css","api/api.ts","assests/icons/profileIcon.svg","assests/icons/messagesIcon.svg","assests/icons/usersIcon.svg","components/navbar/navbar.tsx","components/dialogs/chat/chat.tsx","redux/selectors/authSelectors.ts","components/message/message.tsx","components/dialogs/messages/messages.tsx","components/dialogs/addMessage/addMessage.tsx","components/dialogs/dialogs.tsx","redux/reducers/dialogsReducer.ts","components/hoc/checkAuth.tsx","redux/selectors/dialogsSelectors.ts","components/dialogs/dialogsContainer.tsx","assests/image/avatar.jpg","components/users/user/user.tsx","assests/image/preloader.svg","components/common/preloader/preloader.tsx","components/users/moreButton/moreButton.tsx","components/users/pagination/pagination.tsx","components/common/formField/formField.tsx","components/users/searchForm/searchForm.tsx","components/users/users.tsx","api/usersAPI.ts","redux/reducers/usersReducer.ts","redux/selectors/usersSelectors.ts","components/users/usersContainer.tsx","components/profile/addPost/addPost.tsx","api/profileAPI.ts","redux/reducers/profileReducer.ts","components/profile/addPost/addPostContainer.tsx","components/profile/posts/post/post.tsx","components/profile/posts/posts.tsx","redux/selectors/profileSelectors.ts","components/profile/posts/postsContainer.tsx","components/profile/profileInfo/avatar/avatar.tsx","components/common/itemList/itemList.tsx","components/profile/profileInfo/profileData/profileData.tsx","components/profile/profileInfo/profileDataForm/profileDataForm.tsx","components/profile/profileInfo/profileDataForm/profileDataFormContainer.tsx","components/profile/profileInfo/profileInfo.tsx","components/profile/profileInfo/profileInfoContainer.tsx","components/profile/profile.tsx","components/profile/profileContainer.tsx","components/header/logon/logon.tsx","components/header/logout/logout.tsx","components/header/header.tsx","api/authAPI.ts","redux/reducers/authReducer.ts","components/header/headerContainer.tsx","redux/reducers/appReducer.ts","components/login/loginForm/loginForm.tsx","components/login/loginForm/loginFormContainer.tsx","components/login/login.tsx","components/login/loginContainer.tsx","components/chat/chatMessages/chatMessages.tsx","components/common/textarea/textarea.tsx","components/chat/sendMessage/sendMessage.tsx","components/chat/chat.tsx","api/chatAPI.ts","redux/reducers/chatReducer.ts","redux/selectors/chatSelectors.ts","components/chat/chatContainer.ts","App.js","redux/reduxStore.ts","index.js","components/message/message.module.css","components/common/formField/formField.module.css","components/users/pagination/pagination.module.css","components/users/user/user.module.css","components/header/logon/logon.module.css","components/dialogs/chat/chat.module.css","components/profile/profileInfo/avatar/avatar.module.css","components/profile/profileInfo/profileDataForm/profileDataForm.module.css","components/header/logout/logout.module.css","components/dialogs/dialogs.module.css","components/profile/posts/post/post.module.css","components/profile/profileInfo/profileData/profileData.module.css","components/common/itemList/itemList.module.css","components/header/header.module.css","components/login/loginForm/loginForm.module.css","components/chat/chatMessages/chatMessages.module.css","components/chat/sendMessage/sendMessage.module.css"],"names":["module","exports","ResultCodes","ResultCodeCaptcha","Navbar","className","s","navbar","item","src","profileIcon","activeClassName","active","to","messagesIcon","usersIcon","Chat","props","main","avatar","alt","id","chat_name","name","getIsAuth","state","auth","isAuth","getMyUserId","userId","getCaptchaURL","captchaURL","getLogin","login","Message","myId","useSelector","me","notMe","messageInfo","message","newMessage","Messages","messages","map","AddMessage","add_message","onChange","e","newText","target","value","updateNewMessageText","newMessageText","onClick","addMessage","Dialogs","chats","chat","messagesRoute","path","render","UPDATE_NEW_MESSAGE_TEXT","ADD_MESSAGE","initState","actions","type","dialogsReducer","action","mapStateToProps","CheckAuthComponent","Component","connect","getChats","dialogsPage","dialogsActions","compose","User","React","memo","useState","toggling","setToggling","toggle_button_text","followed","user","photo","user_information","status","button","toggleFollowed","then","disabled","Preloader","preloader","MoreButton","moreButton","currentPage","totalPageCount","moreItems","isFetching","PageNumberItem","appendClassName","pageNumber","Pagination","pageNumbers","pageCount","onPageNumberClick","i","push","startIndex","getPageNumbers","parseInt","currentTarget","innerHTML","setCurrentPage","getItems","pagination","FormField","error","labelText","addComponent","inputTeg","placeholder","innerField","formField","label","htmlFor","content","field","as","el","errorContent","errorIcon","errorMessage","SearchForm","requestUsersAndSetSearchConfig","initialValues","term","friend","onSubmit","values","val","errors","selected","Users","Math","ceil","totalUsersCount","pageUsersLimit","useEffect","requestMoreUsers","searchConfig","deleteUsers","users","photos","small","requestUsers","instance","axios","create","withCredentials","baseURL","headers","usersAPI","get","response","data","post","delete","APPEND_USERS","SET_TOTAL_USERS_COUNT","SET_CURRENT_PAGE","SET_IS_FETCHING","DELETE_USERS","TOGGLE_FOLLOWED","SET_USERS","SET_SEARCH_CONFIG","dispatch","totalCount","items","usersReducer","getUsers","usersPage","getCurrentPage","getTotalUsersCount","getPageUsersLimit","getIsFetching","getSearchConfig","usersActions","a","resultCode","Success","AddPost","newPostText","setNewPostText","add_post","addPost","profileAPI","profile","put","photoURL","formatData","FormData","append","ADD_POST","SET_PROFILE_INFORMATION","SET_STATUS","SAVE_IMAGE","SET_IS_OWNER","SET_OWNER_PROFILE_INFORMATION","posts","likeCount","ownerProfile","isOwner","requestProfileInformation","statusPromise","getStatus","profilePromise","Promise","all","profileReducer","AddPostContainer","Post","likes","like_count","Posts","getProfile","profilePage","getOwnerProfile","getPosts","getIsOwner","getPhotos","PostsContainer","AvatarSettings","fileIsSelected","avatarSettings","uploadFile","Avatar","files","saveImage","ItemList","children","itemList","InfoItem","itemName","itemValue","isLink","infoItem","rel","href","ProfileData","onEdit","profileData","fullName","aboutMe","lookingForAJobDescription","Object","keys","contacts","keyName","ProfileDataForm","isSubmitting","profileDataForm","loginForm","APIError","ProfileDataFormContainer","withFormik","mapPropsToValues","lookingForAJob","validateOnBlur","validateOnChange","handleSubmit","formikBag","setProfileInformation","onEditOff","ProfileInfo","editorMode","setEditorMode","profile_info","large","ProfileInfoContainer","Profile","match","params","myUserId","setIsOwner","profileActions","withRouter","Logon","logon","userLogin","smallPhotos","menu","logout","Logout","registration","Header","header","icon","authAPI","email","password","rememberMe","captcha","SET_PROFILE_DATA","SET_CAPTCHA_URL","payload","getProfileData","authReducer","HeaderContainer","INITIALIZE","initialized","appReducer","LoginForm","LoginFormContainer","Error","url","validationSchema","Yup","shape","required","setFieldValue","setSubmitting","finally","Login","LoginContainer","ChatMessages","refScroll","createRef","current","scrollIntoView","chatMessages","m","userName","ref","AutoSizeTextarea","onEnter","onKeyDown","key","shiftKey","preventDefault","textarea","style","height","scrollHeight","SendMessage","sendMessage","setMessage","sendMessageIn","startListeningMessages","stopListeningMessages","subscribes","statusChanged","messagesReceived","ws","changeConnectStatus","forEach","h","messageHandler","JSON","parse","closeHandler","setTimeout","chatAPI","start","openHandler","errorHandler","cleanUp","removeEventListener","stop","close","WebSocket","addEventListener","subscribeEvent","Event","callback","unSubscribeEvent","splice","indexOf","send","SET_MESSAGE","STATUS_CHANGE","DELETE_MESSAGES","chatReducer","getChatMessages","getConnectStatus","ChatContainer","App","this","initialize","component","DialogsContainer","ProfileContainer","UsersContainer","app","rootReducer","combineReducers","store","createStore","applyMiddleware","thunkMiddleWare","window","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.6cd9fff8.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"messages\":\"messages_messages__1qX_-\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"main\":\"addMessage_main__1IXIV\",\"chats\":\"addMessage_chats__2gi_y\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"users\":\"users_users__2SbPZ\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"main\":\"preloader_main__3DnQr\",\"chats\":\"preloader_chats__mI3Pm\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"profile\":\"profile_profile__2H8gL\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"add_post\":\"addPost_add_post__3g36H\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"main\":\"posts_main__hJC6Z\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"profile_info\":\"profileInfo_profile_info__1IFfq\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"textarea\":\"textarea_textarea__3vIn1\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"button\":\"button_button__2Yz2p\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"navbar\":\"navbar_navbar__hxMYq\",\"active\":\"navbar_active__2snjV\",\"item\":\"navbar_item__1JAKC\"};","import axios from \"axios\";\r\n\r\nexport const instance = axios.create({\r\n    withCredentials:true,\r\n    baseURL:'https://social-network.samuraijs.com/api/1.0/',\r\n    headers:{\r\n        'API-KEY' : 'ceadf895-0db0-4dec-9487-79601e86c00a'\r\n    }\r\n})\r\n\r\nexport type DefaultOperationType<D = {},RC = ResultCodes> = {\r\n    data:D\r\n    resultCode: RC\r\n    messages: Array<string>\r\n}\r\n\r\nexport enum ResultCodes {\r\n    Success = 0,\r\n    Error = 1\r\n}\r\nexport enum ResultCodeCaptcha {\r\n    NeedCaptcha = 10\r\n}","export default __webpack_public_path__ + \"static/media/profileIcon.78b64d9f.svg\";","export default __webpack_public_path__ + \"static/media/messagesIcon.be1f0c90.svg\";","export default __webpack_public_path__ + \"static/media/usersIcon.aab30264.svg\";","import React from 'react';\r\nimport profileIcon from '../../assests/icons/profileIcon.svg'\r\nimport messagesIcon from '../../assests/icons/messagesIcon.svg'\r\nimport usersIcon from '../../assests/icons/usersIcon.svg'\r\nimport s from './navbar.module.css';\r\nimport {NavLink} from \"react-router-dom\";\r\n\r\nconst Navbar = ()=>{\r\n    return(\r\n      <nav className={s.navbar}>\r\n          <div className={s.item}>\r\n              <img src={profileIcon} />\r\n              <NavLink activeClassName={s.active} to='/profile'>Profile</NavLink>\r\n          </div>\r\n          <div className={s.item}>\r\n              <img src={messagesIcon} />\r\n              <NavLink activeClassName={s.active} to='/dialogs'>Messages</NavLink>\r\n          </div>\r\n          <div className={s.item}>\r\n              <img src={usersIcon} />\r\n              <NavLink activeClassName={s.active} to='/users'>Users</NavLink>\r\n          </div>\r\n          <div className={s.item}>\r\n              <img src={messagesIcon} />\r\n              <NavLink activeClassName={s.active} to='/chat'>Chat</NavLink>\r\n          </div>\r\n\r\n      </nav>\r\n    );\r\n}\r\n\r\nexport default Navbar;","import React, {FC} from 'react';\r\nimport s from './chat.module.css';\r\nimport {NavLink} from \"react-router-dom\";\r\n\r\ntype PropsType = {\r\n    id:number\r\n    name:string\r\n}\r\nconst Chat:FC<PropsType> = (props) => {\r\n    return (\r\n        <div className={s.main}>\r\n            <div className={s.avatar}>\r\n                <img alt='avatar' src='https://yt3.ggpht.com/a/AGF-l79_strxcWBhokrn4lOPA5P6GIcCZSmxUOKmDA=s900-c-k-c0xffffffff-no-rj-mo'/>\r\n            </div>\r\n            <NavLink to={'/dialogs/' + props.id} className={s.chat_name}>{props.name}</NavLink>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Chat;","import {StateType} from \"../reduxStore\";\r\n\r\n\r\nexport const getIsAuth = (state: StateType) =>{\r\n    return state.auth.isAuth;\r\n}\r\nexport const getMyUserId = (state: StateType) =>{\r\n    return state.auth.userId;\r\n}\r\n\r\nexport const getCaptchaURL = (state: StateType) =>{\r\n    return state.auth.captchaURL;\r\n}\r\nexport const getLogin = (state:StateType) =>{\r\n    return state.auth.login\r\n}","import React, {FC} from 'react';\r\nimport s from './message.module.css';\r\nimport {useSelector} from \"react-redux\";\r\nimport {getMyUserId} from \"../../redux/selectors/authSelectors\";\r\nimport {NavLink} from 'react-router-dom';\r\n\r\ntype PropsType = {\r\n    className?: string\r\n    avatar?: string\r\n    userId: number\r\n    name: string\r\n    message: string\r\n}\r\nconst Message: FC<PropsType> = (props) => {\r\n    const myId = useSelector(getMyUserId)\r\n    return (\r\n        <div className={`${s.main} ${(props.className || '')} ${props.userId === myId ? s.me : s.notMe}`}>\r\n            <div className={s.avatar}>\r\n                <NavLink to={'profile/' + props.userId}>\r\n                    <img alt='avatar'\r\n                         src={props.avatar || 'https://pixelbox.ru/wp-content/uploads/2020/12/avatar-youtube-99.jpg'}/>\r\n                </NavLink>\r\n            </div>\r\n            <div className={s.messageInfo}>\r\n                <div className={s.name}>\r\n                    <h4>{props.name}</h4>\r\n                </div>\r\n                <div className={`${s.message} ${s.newMessage}`}>\r\n                    <p>{props.message}</p>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Message;","import React, {FC} from 'react';\r\nimport s from './messages.module.css';\r\nimport Message from \"../../message/message\";\r\nimport {MessageType} from \"../../../redux/reducers/dialogsReducer\";\r\n\r\ntype PropsType = {\r\n    messages:Array<MessageType>\r\n}\r\nconst Messages:FC<PropsType> = (props) => {\r\n    let messages = props.messages.map(message =>{\r\n        if(message.me){\r\n            return <Message userId={message.id} className='me' name={message.name} message={message.message} />\r\n        }else{\r\n            return <Message userId={message.id} name={message.name} message={message.message} />\r\n        }\r\n    })\r\n    return (\r\n        <div className={s.messages}>\r\n            {messages}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Messages;","import React, {ChangeEvent, FC} from 'react';\r\nimport s from './addMessage.module.css';\r\n\r\ntype PropsType = {\r\n    id:number\r\n    newMessageText:string\r\n\r\n    updateNewMessageText:(id:number, newText:string) =>void\r\n    addMessage: (id:number) => void\r\n}\r\nconst AddMessage:FC<PropsType> = (props) => {\r\n\r\n    const onNewMessageTextChange = (e:ChangeEvent<HTMLTextAreaElement>)=>{\r\n        let newText = e.target.value;\r\n        props.updateNewMessageText(props.id, newText);\r\n    }\r\n\r\n    const onAddMessage = () =>{\r\n        props.addMessage(props.id);\r\n    }\r\n\r\n    return (\r\n        <div className={s.add_message}>\r\n            <textarea onChange={onNewMessageTextChange} value={props.newMessageText}/>\r\n            <button onClick={onAddMessage}>send message</button>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default AddMessage;","import React, {FC} from 'react';\r\nimport s from './dialogs.module.css';\r\nimport Chat from \"./chat/chat\";\r\nimport Messages from \"./messages/messages\";\r\nimport {Route} from \"react-router-dom\";\r\nimport AddMessage from \"./addMessage/addMessage\";\r\nimport {DialogsPropsType} from \"./dialogsContainer\";\r\n\r\nconst Dialogs:FC<DialogsPropsType> = (props) => {\r\n    let chats =\r\n        props.chats.map(chat => <Chat name={chat.name} id={chat.id}/>)\r\n\r\n    let messagesRoute =\r\n        props.chats.map(chat => <Route path={'/dialogs/' + chat.id} render={() =>\r\n            <div>\r\n                <Messages messages={chat.messages}/>\r\n                <AddMessage id={chat.id} newMessageText={chat.newMessageText}\r\n                            updateNewMessageText={props.updateNewMessageText}\r\n                            addMessage={props.addMessage}\r\n                />\r\n            </div>\r\n        }/>)\r\n\r\n    return (\r\n        <div className={s.main}>\r\n            <div className={s.chats}>\r\n                {chats}\r\n            </div>\r\n            {messagesRoute}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Dialogs;","import {InferActionsTypes} from \"../reduxStore\";\r\n\r\nconst UPDATE_NEW_MESSAGE_TEXT = 'social/dialogs/UPDATE-NEW-MESSAGE-TEXT', ADD_MESSAGE = 'social/dialogs/ADD-MESSAGE';\r\n\r\nexport type MessageType = {\r\n    id: number\r\n    name: string\r\n    message: string\r\n    me: boolean\r\n}\r\nexport type ChatType = {\r\n    id:number\r\n    name: string\r\n    messages: Array<MessageType>\r\n    newMessageText: string\r\n}\r\nconst initState = {\r\n    chats: [\r\n        {\r\n            id: 1,\r\n            name: 'Salich',\r\n            messages: [\r\n                {\r\n                    id: 1,\r\n                    name: 'Salich',\r\n                    message: 'Hi',\r\n                    me: false\r\n                },\r\n                {\r\n                    id: 2,\r\n                    name: 'Me',\r\n                    message: 'Hi, Yoyo',\r\n                    me: true\r\n                }\r\n            ],\r\n            newMessageText: ''\r\n\r\n        },\r\n        {\r\n            id: 2,\r\n            name: 'Lenar',\r\n            messages: [\r\n                {\r\n                    id: 1,\r\n                    name: 'Lenar',\r\n                    message: 'How',\r\n                    me: false\r\n                },\r\n                {\r\n                    id: 2,\r\n                    name: 'Me',\r\n                    message: 'Just do it!!!!!',\r\n                    me: true\r\n                }\r\n            ],\r\n            newMessageText: ''\r\n        }\r\n    ] as Array<ChatType>\r\n}\r\nexport type InitStateType = typeof initState\r\ntype ActionsTypes = InferActionsTypes<typeof actions>\r\n\r\nconst dialogsReducer = (state = initState, action: ActionsTypes ):InitStateType => {\r\n    switch (action.type) {\r\n        case UPDATE_NEW_MESSAGE_TEXT:\r\n            return {\r\n                ...state,\r\n                chats: state.chats.map((chat) => {\r\n                    if (chat.id === action.id) {\r\n                        chat.newMessageText = action.newText;\r\n                    }\r\n                    return chat;\r\n                })\r\n            }\r\n        case ADD_MESSAGE:\r\n            return {\r\n                ...state,\r\n                chats: state.chats.map((chat) => {\r\n                    if (action.id === chat.id) {\r\n                        chat.messages = [...chat.messages, {\r\n                            id: 4,\r\n                            name: 'me',\r\n                            message: chat.newMessageText,\r\n                            me: true\r\n                        }];\r\n                        chat.newMessageText = '';\r\n                    }\r\n                    return chat;\r\n                })\r\n            }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\nexport const actions = {\r\n    updateNewMessageText: (id:number,newText: string) => ({\r\n        type: UPDATE_NEW_MESSAGE_TEXT,\r\n        id, newText:newText\r\n    } as const),\r\n\r\n    addMessage: (id: number) => ({type: ADD_MESSAGE, id: id} as const)\r\n}\r\n\r\n\r\nexport default dialogsReducer;","import {connect} from \"react-redux\";\r\nimport {Redirect} from 'react-router-dom';\r\nimport {StateType} from \"../../redux/reduxStore\";\r\nimport {getIsAuth} from \"../../redux/selectors/authSelectors\";\r\nimport React from \"react\";\r\n\r\ntype MapStatePropsType = {\r\n    isAuth:boolean\r\n}\r\nconst mapStateToProps = (state:StateType):MapStatePropsType =>({\r\n    isAuth: getIsAuth(state)\r\n})\r\n\r\nconst CheckAuthComponent = (Component:any) =>{\r\n    const RedirectComponent = (props:any) =>{\r\n        if(props.isAuth){\r\n            return <Component {...props} />\r\n        }else{\r\n            return <Redirect to='/login'/>\r\n        }\r\n    }\r\n\r\n    return connect<MapStatePropsType, {},{},StateType>(mapStateToProps)(RedirectComponent);\r\n }\r\n\r\n\r\n export default CheckAuthComponent;\r\n\r\n","import {StateType} from \"../reduxStore\";\r\n\r\n\r\nexport const getChats = (state:StateType) =>{\r\n    return state.dialogsPage.chats\r\n}","import Dialogs from \"./dialogs\";\r\nimport {connect} from \"react-redux\";\r\nimport {actions as dialogsActions,\r\n     ChatType,\r\n} from \"../../redux/reducers/dialogsReducer\";\r\nimport {compose} from \"redux\";\r\nimport CheckAuthComponent from \"../hoc/checkAuth\";\r\nimport {StateType} from \"../../redux/reduxStore\";\r\nimport {getChats} from \"../../redux/selectors/dialogsSelectors\";\r\nconst {updateNewMessageText, addMessage} = dialogsActions\r\n\r\ntype MapStatePropsType = {\r\n    chats: Array<ChatType>\r\n}\r\ntype MapDispatchPropsType = {\r\n    addMessage: (id:number) => void\r\n    updateNewMessageText: (id:number, newText:string) => void\r\n}\r\nexport type DialogsPropsType = MapStatePropsType & MapDispatchPropsType\r\nconst mapStateToProps = (state:StateType):MapStatePropsType =>({\r\n    chats:getChats(state),\r\n\r\n})\r\nexport default compose(\r\n    CheckAuthComponent,\r\n    connect<MapStatePropsType, MapDispatchPropsType, {}, StateType>\r\n    (mapStateToProps, {addMessage, updateNewMessageText})\r\n)(Dialogs);","export default __webpack_public_path__ + \"static/media/avatar.c5d81277.jpg\";","import React, {FC, useState} from 'react';\r\nimport s from './user.module.css';\r\nimport button from '../../../commonStyle/button.module.css'\r\nimport avatar from '../../../assests/image/avatar.jpg';\r\nimport {NavLink} from \"react-router-dom\";\r\n\r\ntype PropsType = {\r\n    id: number\r\n    followed: boolean\r\n    photo: string | null\r\n    name: string\r\n    status: string | null\r\n\r\n    toggleFollowed: (id: number, followed: boolean) => any\r\n}\r\n\r\nconst User: FC<PropsType> = React.memo(function User(props) {\r\n    const [toggling, setToggling] = useState(false)\r\n\r\n    const toggleFollowed = () => {\r\n        setToggling(true);\r\n        props.toggleFollowed(props.id, props.followed).then(() => {\r\n            setToggling(false);\r\n        })\r\n    }\r\n    const toggle_button_text = props.followed ? 'unfollow' : 'follow';\r\n    return (\r\n        <div className={s.user}>\r\n            <div className={s.avatar}>\r\n                <NavLink to={`profile/${props.id}`}>\r\n                    <img alt='photo' src={props.photo || avatar}/>\r\n                </NavLink>\r\n            </div>\r\n            <div>\r\n                <div className={s.user_information}>\r\n                    <span className={s.name}>{props.name}</span>\r\n                    <p>status: {props.status || '-'}</p>\r\n                </div>\r\n                <button className={button.button} onClick={toggleFollowed} disabled={toggling}>\r\n                    {toggle_button_text}\r\n                </button>\r\n            </div>\r\n        </div>\r\n    );\r\n})\r\n\r\nexport default User;","export default __webpack_public_path__ + \"static/media/preloader.43f87d1d.svg\";","import React from 'react';\r\nimport s from './preloader.module.css';\r\nimport preloader from '../../../assests/image/preloader.svg';\r\n\r\nconst Preloader = () => {\r\n    return (\r\n        <div className={s.main}>\r\n            <img alt='Loading...' src={preloader} />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Preloader;","import React, {FC} from 'react';\r\nimport s from './moreButton.module.css';\r\nimport Preloader from \"../../common/preloader/preloader\";\r\ntype PropsType = {\r\n    totalPageCount: number\r\n    currentPage: number\r\n    isFetching:boolean\r\n\r\n    moreItems: () => void\r\n}\r\nconst MoreButton:FC<PropsType> = React.memo(function MoreButton(props){\r\n    let moreButton;\r\n    if (props.currentPage < props.totalPageCount) {\r\n        moreButton = <button onClick={props.moreItems}>More</button>;\r\n    }\r\n    return (\r\n        <div className={s.moreButton}>\r\n            {\r\n                props.isFetching ?\r\n                    <Preloader/>\r\n                    : moreButton\r\n            }\r\n        </div>\r\n    );\r\n})\r\n\r\nexport default MoreButton;","import React, {FC} from 'react';\r\nimport s from './pagination.module.css';\r\n\r\n\r\ntype OnPageNumberClickType = (e: React.MouseEvent<HTMLDivElement>) => void\r\ntype PropsType = {\r\n    totalPageCount: number\r\n    currentPage: number\r\n\r\n    setCurrentPage: (pageNumber:number) => void\r\n    getItems: (pageNumber:number, term:string, friend:boolean | null) => void\r\n}\r\ntype PageNumberItemPropsType = {\r\n    onClick?:OnPageNumberClickType\r\n    appendClassName?:string\r\n    value:any\r\n}\r\nconst PageNumberItem:FC<PageNumberItemPropsType> = ({onClick, value,appendClassName = ''}) =>{\r\n    return (\r\n        <div onClick={onClick} className={`${s.pageNumber} ${appendClassName}`}>{value}</div>\r\n    )\r\n}\r\nconst getPageNumbers = (pageCount:number, currentPage:number, onPageNumberClick:OnPageNumberClickType)=>{\r\n    let pageNumbers = [];\r\n    if(currentPage > 6){\r\n        for(let i = 1; i < 4; i++){\r\n            pageNumbers.push(<PageNumberItem onClick={onPageNumberClick} value={i} />);\r\n        }\r\n        pageNumbers.push(<PageNumberItem value='...' />);\r\n    }\r\n\r\n    if (currentPage + 4 < pageCount) {\r\n        let startIndex;\r\n        if(currentPage !== 1){\r\n            startIndex = currentPage - 1;\r\n        }else{\r\n            startIndex = currentPage;\r\n        }\r\n        for (let i = startIndex; i < startIndex + 3; i++) {\r\n            if(i === currentPage){\r\n                pageNumbers.push(<PageNumberItem value={i} onClick={onPageNumberClick} appendClassName={s.active} />);\r\n            }else{\r\n                pageNumbers.push(<PageNumberItem value={i} onClick={onPageNumberClick} />)\r\n            }\r\n        }\r\n        pageNumbers.push(<PageNumberItem value='...' />)\r\n        for (let i = pageCount - 3; i <= pageCount; i++) {\r\n            pageNumbers.push(<PageNumberItem value={i} onClick={onPageNumberClick} />)\r\n        }\r\n    } else {\r\n        for (let i = pageCount - 5; i <= pageCount; i++) {\r\n            if(i === currentPage){\r\n                pageNumbers.push(<PageNumberItem value={i} onClick={onPageNumberClick} appendClassName={s.active}/>);\r\n            }else{\r\n                pageNumbers.push(<PageNumberItem value={i} onClick={onPageNumberClick} />)\r\n\r\n            }\r\n        }\r\n    }\r\n\r\n    return pageNumbers;\r\n}\r\nconst Pagination: FC<PropsType> = React.memo(function Pagination(props){\r\n    const onPageNumberClick = (e: React.MouseEvent<HTMLDivElement>) =>{\r\n        const pageNumber = parseInt(e.currentTarget.innerHTML);\r\n        props.setCurrentPage(pageNumber);\r\n        props.getItems(pageNumber, '', null);\r\n    }\r\n    const pageNumbers = getPageNumbers(props.totalPageCount, props.currentPage, onPageNumberClick);\r\n    return (\r\n        <div className={s.pagination}>\r\n            <div className={s.pageNumbers}>\r\n                {pageNumbers}\r\n            </div>\r\n        </div>\r\n    );\r\n})\r\n\r\nexport default Pagination;","import React from 'react';\r\nimport s from './formField.module.css';\r\nimport {ErrorMessage, Field} from \"formik\";\r\n\r\ntype PropsType = {\r\n    name: string\r\n    error: string | undefined\r\n    labelText?: string\r\n    addComponent?: React.ReactNode\r\n    inputTeg?: string\r\n    type?: string\r\n    placeholder?: string\r\n    innerField?: Array<React.ReactNode> | null\r\n}\r\nconst FormField = ({\r\n                       name, error, labelText = name, addComponent = null,\r\n                       inputTeg = 'input', type = 'text', placeholder = name, innerField = null\r\n                   }: PropsType) => {\r\n    return (\r\n        <div className={s.formField}>\r\n            <label className={s.label} htmlFor={name}>{labelText}</label>\r\n            {addComponent}\r\n            <div className={s.content}>\r\n                <Field className={`${s[inputTeg]} ${s.field}`} as={inputTeg} id={name} type={type} name={name}\r\n                       placeholder={placeholder}>\r\n                    {innerField?.map(el => el)}\r\n                </Field>\r\n                {error ? <div className={s.errorContent}>\r\n                    <div className={s.errorIcon}>!</div>\r\n                    <span className={s.errorMessage}>\r\n                        {error}\r\n                    </span>\r\n                </div>\r\n                    : null}\r\n\r\n\r\n            </div>\r\n\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default FormField;","import {Form, Formik} from \"formik\";\r\nimport {FC} from \"react\";\r\nimport FormField from \"../../common/formField/formField\";\r\nimport {SearchConfigType} from \"../../../redux/reducers/usersReducer\";\r\n\r\ntype ValuesType = {\r\n    term: string\r\n    friend:boolean | null\r\n}\r\ntype PropsType = {\r\n    requestUsersAndSetSearchConfig: (currentPage:number, term:string, friend:boolean | null) => void\r\n}\r\nconst SearchForm:FC<PropsType> = ({requestUsersAndSetSearchConfig}) =>{\r\n    const initialValues:ValuesType = {\r\n        term: '',\r\n        friend: null\r\n    }\r\n\r\n    const onSubmit = (values:ValuesType) =>{\r\n        function parseToBoolean(val:any):boolean | null {\r\n            return val === 'null' || null ? null : val === 'true'\r\n        }\r\n        requestUsersAndSetSearchConfig(1, values.term, parseToBoolean(values.friend))\r\n    }\r\n    return(\r\n        <div className='searchForm'>\r\n            <Formik\r\n                initialValues={initialValues}\r\n                    onSubmit={onSubmit}>\r\n                {\r\n                    ({errors}) =>(\r\n                        <Form>\r\n                            <FormField name='term' error={errors.term}  />\r\n                            <FormField name='friend' error={errors.term} inputTeg='select' innerField={[\r\n                                <option  value='null' selected={true}>All users</option>,\r\n                                <option value='true'>Only friends</option>,\r\n                                <option value='false'>Not friends</option>\r\n                            ]}  />\r\n                            <button>Search</button>\r\n                        </Form>\r\n                    )\r\n                }\r\n\r\n            </Formik>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default SearchForm","import React, {FC, useEffect} from 'react';\r\n\r\nimport s from './users.module.css';\r\nimport User from \"./user/user\";\r\nimport MoreButton from \"./moreButton/moreButton\";\r\nimport Pagination from \"./pagination/pagination\";\r\nimport {PropsType} from \"./usersContainer\";\r\nimport SearchForm from \"./searchForm/searchForm\";\r\n\r\n\r\nconst Users: FC<PropsType> = ({requestUsersAndSetSearchConfig, ...props}) => {\r\n    const totalPageCount = Math.ceil(props.totalUsersCount / props.pageUsersLimit)\r\n\r\n    useEffect(() => {\r\n        props.requestMoreUsers(props.currentPage, props.searchConfig.term, props.searchConfig.friend)\r\n\r\n        return function end() {\r\n            props.setCurrentPage(1);\r\n            props.deleteUsers();\r\n        }\r\n    }, [])\r\n\r\n    const moreUsers = () => {\r\n        props.requestMoreUsers(props.currentPage + 1, props.searchConfig.term, props.searchConfig.friend)\r\n\r\n    }\r\n    const users = props.users.map((user) =>\r\n        <User name={user.name} photo={user.photos.small} key={user.id}\r\n              status={user.status} id={user.id} toggleFollowed={props.toggleFollowed} followed={user.followed}/>\r\n    );\r\n\r\n    return (\r\n        <div className={s.users}>\r\n            <SearchForm requestUsersAndSetSearchConfig={requestUsersAndSetSearchConfig} />\r\n            <Pagination currentPage={props.currentPage} totalPageCount={totalPageCount}\r\n                        setCurrentPage={props.setCurrentPage}\r\n                        getItems={props.requestUsers}/>\r\n            {users}\r\n            <MoreButton isFetching={props.isFetching} currentPage={props.currentPage}\r\n                        totalPageCount={totalPageCount}\r\n                        moreItems={moreUsers} />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Users;","import {DefaultOperationType, instance} from \"./api\";\r\nimport {UserType} from \"../redux/reducers/usersReducer\";\r\n\r\ntype GetUsersType = {\r\n    items:Array<UserType>\r\n    totalCount:number\r\n    error:string | null\r\n}\r\n\r\nexport const usersAPI = {\r\n    getUsers(currentPage: number, term:string, friend:boolean | null) {\r\n        return instance.get<GetUsersType>(`users?page=${currentPage}&term=${term}&friend=${friend}`).then(response => response.data);\r\n    },\r\n    follow(id: number) {\r\n        return instance.post<DefaultOperationType>(`follow/${id}`).then(response => response.data);\r\n    },\r\n    unfollow(id: number) {\r\n        return instance.delete<DefaultOperationType>(`follow/${id}`).then(response => response.data);\r\n    }\r\n}","import {PhotosType} from \"./profileReducer\";\r\nimport {usersAPI} from \"../../api/usersAPI\";\r\nimport {ResultCodes} from \"../../api/api\";\r\nimport {InferActionsTypes, StateType} from \"../reduxStore\";\r\nimport {ThunkAction} from \"redux-thunk\";\r\n\r\nconst APPEND_USERS = 'social/users/APPEND-USERS', SET_TOTAL_USERS_COUNT = 'social/users/SET-TOTAL-USERS-COUNT',\r\n    SET_CURRENT_PAGE = 'social/users/SET-CURRENT-PAGE', SET_IS_FETCHING = 'social/users/SET-IS-FETCHING',\r\n    DELETE_USERS = 'social/users/DELETE-USERS', TOGGLE_FOLLOWED = 'social/users/TOGGLE-FOLLOWED',\r\n    SET_USERS = 'social/users/SET-USERS', SET_SEARCH_CONFIG='social/users/SET-SEARCH-CONFIG'\r\nexport type UserType = {\r\n    name: string\r\n    id: number\r\n    uniqueUrlName: string | null\r\n    photos: PhotosType\r\n    status: string | null\r\n    followed: boolean\r\n}\r\nexport type SearchConfigType = {\r\n    friend:boolean | null,\r\n    term:string\r\n}\r\nconst initState = {\r\n    users: [] as Array<UserType>,\r\n    totalUsersCount: 0,\r\n    pageUsersLimit: 10,\r\n    isFetching: false,\r\n    currentPage: 1,\r\n    searchConfig: {\r\n        friend:null,\r\n        term: ''\r\n    } as SearchConfigType\r\n}\r\n\r\ntype InitStateType = typeof initState\r\ntype ActionsTypes = InferActionsTypes<typeof actions>\r\ntype ThunkType<T> = ThunkAction<T, StateType, unknown, ActionsTypes>\r\n\r\nconst usersReducer = (state = initState, action: ActionsTypes): InitStateType => {\r\n    switch (action.type) {\r\n        case APPEND_USERS:\r\n            return {\r\n                ...state,\r\n                users: [...state.users, ...action.users]\r\n            }\r\n        case SET_TOTAL_USERS_COUNT:\r\n            return {\r\n                ...state,\r\n                totalUsersCount: action.totalUsersCount\r\n            }\r\n        case SET_CURRENT_PAGE:\r\n            return {\r\n                ...state,\r\n                currentPage: action.currentPage\r\n            }\r\n        case SET_IS_FETCHING:\r\n            return {\r\n                ...state,\r\n                isFetching: action.isFetching\r\n            }\r\n        case DELETE_USERS:\r\n            return {\r\n                ...state,\r\n                users: []\r\n            }\r\n        case SET_USERS:\r\n            return {\r\n                ...state,\r\n                users: action.users\r\n            }\r\n        case TOGGLE_FOLLOWED:\r\n            return {\r\n                ...state,\r\n                users: state.users.map((user) => {\r\n                    if (user.id === action.id) {\r\n                        user.followed = !user.followed\r\n                    }\r\n                    return user;\r\n                })\r\n            }\r\n        case SET_SEARCH_CONFIG:\r\n            return {\r\n                ...state,\r\n                searchConfig: action.searchConfig\r\n            }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\nexport const actions = {\r\n    appendUsers: (users: Array<UserType>) => ({type: APPEND_USERS, users} as const),\r\n    setUsers: (users: Array<UserType>) => ({type: SET_USERS, users} as const),\r\n    setTotalUsersCount: (totalUsersCount: number) => ({\r\n        type: SET_TOTAL_USERS_COUNT,\r\n        totalUsersCount\r\n    } as const),\r\n    setCurrentPage: (currentPage: number) => ({\r\n        type: SET_CURRENT_PAGE,\r\n        currentPage\r\n    } as const),\r\n    setIsFetching: (isFetching: boolean) => ({type: SET_IS_FETCHING, isFetching} as const),\r\n    deleteUsers: () => ({type: DELETE_USERS} as const),\r\n    toggleFollowedSuccess: (id: number) => ({type: TOGGLE_FOLLOWED, id} as const),\r\n    setSearchConfig: (searchConfig:SearchConfigType) => ({type:SET_SEARCH_CONFIG, searchConfig} as const)\r\n\r\n}\r\nexport const requestUsersAndSetSearchConfig = (currentPage: number, term:string, friend:boolean | null):ThunkType<void> => (dispatch) =>{\r\n    dispatch(actions.setSearchConfig({term, friend}))\r\n    dispatch(requestUsers(currentPage, term, friend))\r\n}\r\nexport const requestMoreUsers = (currentPage: number, term:string, friend:boolean | null): ThunkType<void> => (dispatch) => {\r\n    dispatch(actions.setIsFetching(true));\r\n    dispatch(actions.setCurrentPage(currentPage));\r\n    usersAPI.getUsers(currentPage,term,friend).then(data => {\r\n        if (data.error === null) {\r\n            dispatch(actions.setTotalUsersCount(data.totalCount));\r\n            dispatch(actions.appendUsers(data.items));\r\n            dispatch(actions.setIsFetching(false));\r\n        }\r\n    })\r\n}\r\nexport const requestUsers = (currentPage: number, term:string, friend:boolean | null): ThunkType<void> => (dispatch) => {\r\n    dispatch(actions.deleteUsers());\r\n    dispatch(actions.setIsFetching(true));\r\n    usersAPI.getUsers(currentPage,term,friend).then((data) => {\r\n        if (data.error === null) {\r\n            dispatch(actions.setTotalUsersCount(data.totalCount));\r\n            dispatch(actions.setUsers(data.items));\r\n            dispatch(actions.setIsFetching(false));\r\n        }\r\n    })\r\n}\r\n\r\nexport const toggleFollowed = (id: number, followed: boolean): ThunkType<void> => async (dispatch) => {\r\n    let data;\r\n    if (followed) {\r\n        data = await usersAPI.unfollow(id);\r\n    } else {\r\n        data = await usersAPI.follow(id);\r\n    }\r\n    if (data.resultCode === ResultCodes.Success) {\r\n        dispatch(actions.toggleFollowedSuccess(id));\r\n    }\r\n}\r\nexport default usersReducer","import {StateType} from \"../reduxStore\";\r\n\r\n\r\nexport const getUsers = (state:StateType) =>{\r\n    return state.usersPage.users;\r\n}\r\n\r\nexport const getCurrentPage = (state:StateType) =>{\r\n    return state.usersPage.currentPage;\r\n}\r\n\r\nexport const getTotalUsersCount = (state:StateType) =>{\r\n    return state.usersPage.totalUsersCount;\r\n}\r\n\r\nexport const getPageUsersLimit = (state:StateType) =>{\r\n    return state.usersPage.pageUsersLimit;\r\n}\r\n\r\nexport const getIsFetching = (state:StateType) =>{\r\n    return state.usersPage.isFetching;\r\n}\r\n\r\nexport const getSearchConfig = (state:StateType) =>{\r\n    return state.usersPage.searchConfig\r\n}","import Users from './users';\r\nimport {connect} from 'react-redux';\r\nimport {\r\n    actions as usersActions,\r\n    toggleFollowed,\r\n    requestMoreUsers, requestUsers, UserType, SearchConfigType, requestUsersAndSetSearchConfig\r\n} from \"../../redux/reducers/usersReducer\";\r\nimport {compose} from \"redux\";\r\nimport {\r\n    getCurrentPage,\r\n    getIsFetching,\r\n    getPageUsersLimit, getSearchConfig,\r\n    getTotalUsersCount,\r\n    getUsers\r\n} from \"../../redux/selectors/usersSelectors\";\r\nimport {StateType} from \"../../redux/reduxStore\";\r\nconst {deleteUsers, setCurrentPage} = usersActions\r\n\r\ntype MapStatePropsType = {\r\n    users: Array<UserType>\r\n    currentPage:number\r\n    totalUsersCount:number\r\n    pageUsersLimit:number\r\n    isFetching:boolean\r\n    searchConfig:SearchConfigType\r\n}\r\ntype MapDispatchType = {\r\n    setCurrentPage: (currentPage:number) => void\r\n    deleteUsers: () => void\r\n    toggleFollowed: (id: number, followed: boolean) => void\r\n    requestMoreUsers: (currentPage:number, term:string, friend:boolean | null) => void\r\n    requestUsers: (currentPage:number, term:string, friend:boolean | null) => void\r\n    requestUsersAndSetSearchConfig: (currentPage:number, term:string, friend:boolean | null) => void\r\n}\r\nexport type PropsType = MapStatePropsType & MapDispatchType\r\nconst mapStateToProps = (state:StateType):MapStatePropsType => ({\r\n    users: getUsers(state),\r\n    currentPage: getCurrentPage(state),\r\n    totalUsersCount: getTotalUsersCount(state),\r\n    pageUsersLimit: getPageUsersLimit(state),\r\n    isFetching: getIsFetching(state),\r\n    searchConfig:getSearchConfig(state)\r\n})\r\n\r\nexport default compose(\r\n    connect<MapStatePropsType, MapDispatchType, {}, StateType>(mapStateToProps, {\r\n        setCurrentPage, deleteUsers, toggleFollowed, requestMoreUsers, requestUsers,requestUsersAndSetSearchConfig\r\n    }),\r\n\r\n)(Users)\r\n","import React, {ChangeEvent, FC, useState} from 'react';\r\nimport s from './addPost.module.css';\r\nimport {PropsType} from \"./addPostContainer\";\r\n\r\nconst AddPost:FC<PropsType> = (props) => {\r\n    const [newPostText, setNewPostText] = useState('new');\r\n    const onAddPost = ()=>{\r\n        props.addPost(newPostText);\r\n    }\r\n    const updateNewPostText = (e:ChangeEvent<HTMLTextAreaElement>) =>{\r\n        setNewPostText(e.currentTarget.value);\r\n    }\r\n\r\n\r\n    return (\r\n        <div className={s.add_post}>\r\n            <textarea onChange={updateNewPostText}  value={newPostText} />\r\n            <button onClick={onAddPost}>Add post</button>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default AddPost;","import {PhotosType, ProfileType} from \"../redux/reducers/profileReducer\";\r\nimport {DefaultOperationType, instance} from \"./api\";\r\n\r\ntype SaveImageDataType = {\r\n    photos: PhotosType\r\n}\r\nexport const profileAPI = {\r\n    getProfile(userId: number) {\r\n        return instance.get<ProfileType>(`profile/${userId}`).then(response => response.data);\r\n    },\r\n    setProfile(profile: ProfileType) {\r\n        return instance.put<DefaultOperationType>('profile', profile).then(response => response.data);\r\n    },\r\n    getStatus(userId: number) {\r\n        return instance.get<string | null>(`profile/status/${userId}`).then(response => response.data);\r\n    },\r\n    setStatus(status: string | null) {\r\n        return instance.put<DefaultOperationType>('profile/status', {status: status}).then(response => response.data)\r\n    },\r\n    savePhoto(photoURL: File) {\r\n        const formatData = new FormData();\r\n        formatData.append('image', photoURL);\r\n        return instance.put<DefaultOperationType<SaveImageDataType>>('profile/photo', formatData, {\r\n            headers: {\r\n                'Content-Type': 'multipart/form-data'\r\n            }\r\n        }).then(response => response.data)\r\n    }\r\n}","import {profileAPI} from \"../../api/profileAPI\";\r\nimport {InferActionsTypes, StateType} from \"../reduxStore\";\r\nimport {ThunkAction} from \"redux-thunk\";\r\nimport {ResultCodes} from \"../../api/api\";\r\nimport {deepCloneObject} from \"../../utils/commonFunction\";\r\n\r\nconst ADD_POST = 'social/profile/ADD-POST',\r\n    SET_PROFILE_INFORMATION = 'social/profile/SET-PROFILE-INFORMATION',\r\n    SET_IS_FETCHING = 'social/profile/SET-IS-FETCHING', SET_STATUS = 'social/profile/SET-STATUS',\r\n    SAVE_IMAGE = 'social/profile/SAVE_IMAGE', SET_IS_OWNER = 'social/profile/SET-IS-OWNER',\r\n    SET_OWNER_PROFILE_INFORMATION = 'social/profile/SET-OWNER-PROFILE-INFORMATION'\r\n\r\nexport type PostType = {\r\n    id: number\r\n    message: string\r\n    name: string\r\n    likeCount: number\r\n}\r\nexport type ContactsType = {\r\n    facebook: string | null\r\n    website: string | null\r\n    vk: string | null\r\n    twitter: string | null\r\n    instagram: string | null\r\n    youtube: string | null\r\n    github: string | null\r\n    mainLink: string | null\r\n}\r\nexport type PhotosType = {\r\n    small: string | null\r\n    large: string | null\r\n}\r\nexport type ProfileType = {\r\n    aboutMe: string\r\n    contacts: ContactsType\r\n    lookingForAJob: boolean\r\n    lookingForAJobDescription: string\r\n    fullName: string\r\n    userId: number\r\n    photos: PhotosType\r\n}\r\nconst initState = {\r\n    posts: [\r\n        {\r\n            id: 1,\r\n            message: 'Hi',\r\n            name: 'FIO',\r\n            likeCount: 10\r\n        },\r\n        {\r\n            id: 2,\r\n            message: 'How are you?',\r\n            name: 'FIO',\r\n            likeCount: 15\r\n        }\r\n    ] as Array<PostType>,\r\n    profile: null as ProfileType | null,\r\n    ownerProfile: null as ProfileType | null,\r\n    status: '' as string | null,\r\n    isFetching: true,\r\n    isOwner: false\r\n}\r\nexport type InitStateType = typeof initState\r\ntype ActionsTypes = InferActionsTypes<typeof actions>\r\ntype ThunkType<T> = ThunkAction<T, StateType, unknown, ActionsTypes>\r\n\r\nconst profileReducer = (state: InitStateType = initState, action: ActionsTypes): InitStateType => {\r\n    switch (action.type) {\r\n        case ADD_POST:\r\n            return {\r\n                ...state,\r\n                posts: [...state.posts, {\r\n                    id: 3,\r\n                    message: action.newPostText,\r\n                    name: 'FIO',\r\n                    likeCount: 0\r\n                }],\r\n            };\r\n        case SET_PROFILE_INFORMATION:\r\n            return {\r\n                ...state,\r\n                profile: {...state.profile, ...action.profile}\r\n            }\r\n        case SET_IS_FETCHING:\r\n            return {\r\n                ...state,\r\n                isFetching: action.isFetching\r\n            }\r\n        case SET_STATUS:\r\n            return {\r\n                ...state,\r\n                status: action.status\r\n            }\r\n        case SAVE_IMAGE:\r\n            const profile = state.profile ? {...state.profile, photos: action.photos} : null;\r\n            return {\r\n                ...state,\r\n                profile\r\n            }\r\n        case SET_IS_OWNER:\r\n            return {\r\n                ...state,\r\n                isOwner: action.isOwner\r\n            }\r\n        case SET_OWNER_PROFILE_INFORMATION:\r\n            return {\r\n                ...state,\r\n                ownerProfile: {...action.profile}\r\n            }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\nexport const actions = {\r\n    setIsFetching: (isFetching: boolean) => ({type: SET_IS_FETCHING, isFetching} as const),\r\n    setStatusSuccess: (status: string | null) => ({type: SET_STATUS, status} as const),\r\n    saveImageSuccess: (photos: PhotosType) => ({type: SAVE_IMAGE, photos} as const),\r\n    setIsOwner: (isOwner: boolean) => ({type: SET_IS_OWNER, isOwner} as const),\r\n    addPost: (newPostText: string) => ({type: ADD_POST, newPostText} as const),\r\n    setProfileInformationSuccess: (profile: ProfileType) => ({\r\n        type: SET_PROFILE_INFORMATION,\r\n        profile\r\n    } as const),\r\n    setOwnerProfileInformation: (profile: ProfileType) => ({\r\n        type: SET_OWNER_PROFILE_INFORMATION,\r\n        profile\r\n    } as const)\r\n}\r\nexport const setStatus = (status: string | null): ThunkType<void> => (dispatch) => {\r\n    profileAPI.setStatus(status).then((data) => {\r\n        if (data.resultCode === ResultCodes.Success) {\r\n            dispatch(actions.setStatusSuccess(status));\r\n        }\r\n    })\r\n}\r\n\r\nexport const requestProfileInformation = (userId: number, me: boolean = false): ThunkType<Promise<void>> => (dispatch) => {\r\n    dispatch(actions.setIsFetching(true));\r\n    const statusPromise = dispatch(getStatus(userId))\r\n    const profilePromise = profileAPI.getProfile(userId)\r\n    return Promise.all([statusPromise, profilePromise]).then(([voidData, data]) => {\r\n        if (me) {\r\n            dispatch(actions.setOwnerProfileInformation(data));\r\n        } else {\r\n            dispatch(actions.setProfileInformationSuccess(data));\r\n        }\r\n        dispatch(actions.setIsFetching(false));\r\n    })\r\n}\r\nexport const setProfileInformation = (profile: ProfileType): ThunkType<void> => (dispatch) => {\r\n    profileAPI.setProfile(profile).then(data => {\r\n        if (data.resultCode === ResultCodes.Success) {\r\n            dispatch(actions.setOwnerProfileInformation(profile))\r\n        }\r\n    })\r\n}\r\nexport const getStatus = (userId: number): ThunkType<void> => (dispatch) => {\r\n    profileAPI.getStatus(userId).then((data) => {\r\n        dispatch(actions.setStatusSuccess(data));\r\n    })\r\n}\r\n\r\nexport const saveImage = (photoURL: File): ThunkType<void> => (dispatch) => {\r\n    profileAPI.savePhoto(photoURL).then((data) => {\r\n        if (data.resultCode === ResultCodes.Success) {\r\n            dispatch(actions.saveImageSuccess(data.data.photos));\r\n        }\r\n    })\r\n}\r\n\r\nexport default profileReducer;","import {connect} from \"react-redux\";\r\nimport AddPost from \"./addPost\";\r\nimport {\r\n    actions as profileActions,\r\n} from \"../../../redux/reducers/profileReducer\";\r\nimport {StateType} from \"../../../redux/reduxStore\";\r\nconst {addPost} = profileActions\r\n\r\n\r\ntype MapDispatchPropsType = {\r\n    addPost: (newPostText: string) => void\r\n}\r\nexport type PropsType = MapDispatchPropsType\r\nconst AddPostContainer = connect<{}, MapDispatchPropsType, {}, StateType>(null,\r\n    {addPost})(AddPost);\r\nexport default AddPostContainer;","import React, {FC} from 'react';\r\nimport s from './post.module.css';\r\nimport Message from '../../../message/message'\r\n\r\ntype PropsType = {\r\n    name:string\r\n    message:string\r\n    like_count:number\r\n}\r\nconst Post:FC<PropsType> = (props) =>{\r\n    return(\r\n        <div className={s.main}>\r\n            <Message userId={1} name={props.name} message={props.message}/>\r\n            <div className={s.likes}>\r\n                <button>Like</button>\r\n                <p>{props.like_count}</p>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Post;","import React, {FC} from 'react';\r\nimport s from './posts.module.css';\r\nimport Post from \"./post/post\";\r\nimport {PropsType} from \"./postsContainer\";\r\n\r\nconst Posts:FC<PropsType> = (props) => {\r\n    let posts = props.posts.map(\r\n        post => <Post key={post.id} message={post.message}\r\n                      name={post.name} like_count={post.likeCount}/>);\r\n    return (\r\n        <div className={s.posts}>\r\n            {posts}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Posts;","import {StateType} from \"../reduxStore\";\r\n\r\nexport const getProfile = (state:StateType) => {\r\n    return state.profilePage.profile;\r\n}\r\nexport const getOwnerProfile = (state:StateType) =>{\r\n    return state.profilePage.ownerProfile\r\n}\r\nexport const getIsFetching = (state:StateType) => {\r\n    return state.profilePage.isFetching;\r\n}\r\nexport const getPosts = (state:StateType) => {\r\n    return state.profilePage.posts;\r\n}\r\nexport const getIsOwner = (state:StateType) => {\r\n    return state.profilePage.isOwner;\r\n}\r\nexport const getPhotos = (state:StateType) =>{\r\n    return state.profilePage.profile?.photos\r\n}","import Posts from \"./posts\";\r\nimport {getPosts} from \"../../../redux/selectors/profileSelectors\";\r\nimport {PostType} from \"../../../redux/reducers/profileReducer\";\r\nimport {StateType} from \"../../../redux/reduxStore\";\r\nimport {connect} from \"react-redux\";\r\n\r\n\r\ntype MapStatePropsType = {\r\n    posts: Array<PostType>\r\n}\r\nexport type PropsType = MapStatePropsType\r\nconst mapStateToProps = (state: StateType): MapStatePropsType => ({\r\n    posts: getPosts(state)\r\n})\r\n\r\nconst PostsContainer = connect<MapStatePropsType, {}, {}, StateType>(mapStateToProps)(Posts);\r\nexport default PostsContainer","import React, {ChangeEvent, FC} from 'react';\r\nimport s from './avatar.module.css';\r\nimport avatar from '../../../../assests/image/avatar.jpg';\r\n\r\ntype PropsType = {\r\n    photo: string | null | undefined\r\n    isOwner: boolean\r\n    saveImage: (file: File) => void\r\n}\r\nconst Avatar: FC<PropsType> = (props) => {\r\n    const fileIsSelected = (e: ChangeEvent<HTMLInputElement>) => {\r\n        const files = e.currentTarget.files\r\n        if (files !== null && files[0]) {\r\n            props.saveImage(files[0])\r\n        }\r\n    }\r\n    return (\r\n        <div className={s.avatar}>\r\n            <img alt='фон'\r\n                 src={props.photo || avatar}/>\r\n\r\n            {props.isOwner ? <AvatarSettings fileIsSelected={fileIsSelected}/> : null}\r\n        </div>\r\n    );\r\n}\r\ntype AvatarSettingsPropsType = {\r\n    fileIsSelected: (e: ChangeEvent<HTMLInputElement>) => void\r\n}\r\nconst AvatarSettings: FC<AvatarSettingsPropsType> = ({fileIsSelected}) => {\r\n    return (\r\n        <div className={s.avatarSettings}>\r\n            <div className={s.uploadFile}>\r\n                <label htmlFor='file'/>\r\n                <input id='file' onChange={fileIsSelected} type='file'/>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Avatar;","import React, {FC} from \"react\";\r\nimport s from \"./itemList.module.css\";\r\ntype InfoListPropsType = {\r\n    label:string\r\n    className?:string\r\n}\r\nconst ItemList:FC<InfoListPropsType> = ({className = '',children, label}) =>{\r\n    return(\r\n        <div  className={`${s.itemList} ${className}`}>\r\n            <span>{label}</span>\r\n            <div className={s.items}>\r\n                {children}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\nexport default ItemList","import React, {FC} from 'react';\r\nimport s from './profileData.module.css';\r\nimport button from '../../../../commonStyle/button.module.css'\r\nimport {ContactsType, ProfileType} from \"../../../../redux/reducers/profileReducer\";\r\nimport ItemList from \"../../../common/itemList/itemList\";\r\n\r\ntype PropsType = {\r\n    profile: ProfileType\r\n    isOwner: boolean\r\n    onEdit: () => void\r\n}\r\ntype InfoItemPropsType = {\r\n    itemName:string\r\n    itemValue:string | null\r\n    isLink?:boolean\r\n}\r\n\r\nconst ProfileData: FC<PropsType> = ({profile, onEdit, isOwner}) => {\r\n    return (\r\n        <div className={s.profileData}>\r\n            <ItemList label='Personal information'>\r\n                <InfoItem itemName='Full name' itemValue={profile.fullName}/>\r\n                <InfoItem itemName='About me' itemValue={profile.aboutMe}/>\r\n                <InfoItem itemName='Skills' itemValue={profile.lookingForAJobDescription}/>\r\n            </ItemList>\r\n            <ItemList label='Contacts'>\r\n                {Object.keys(profile.contacts).map(keyName => {\r\n                    return <InfoItem isLink={true} itemName={keyName} itemValue={profile.contacts[keyName as keyof ContactsType]}/>\r\n                })}\r\n            </ItemList>\r\n            {\r\n                isOwner ? <button className={button.button} onClick={onEdit}>Edit Information</button> : null\r\n            }\r\n        </div>\r\n    );\r\n}\r\n\r\nconst InfoItem:FC<InfoItemPropsType> = ({itemName, itemValue, isLink = false}) =>{\r\n\r\n    return(\r\n        <div className={s.infoItem}>\r\n            <span>{`${itemName}:` }</span>\r\n            {isLink? <a rel='noreferrer' href={itemValue as string} target='_blank'> {itemValue} </a> : <p>{itemValue}</p>}\r\n        </div>\r\n    )\r\n}\r\nexport default ProfileData;","import React, {FC} from 'react';\r\nimport s from './profileDataForm.module.css';\r\nimport button from '../../../../commonStyle/button.module.css'\r\nimport {Form, FormikProps} from \"formik\";\r\nimport FormField from \"../../../common/formField/formField\";\r\nimport {FormikPropsType, FormikValuesType} from \"./profileDataFormContainer\";\r\nimport ItemList from \"../../../common/itemList/itemList\";\r\n\r\nconst ProfileDataForm: FC<FormikPropsType & FormikProps<FormikValuesType>> = (props) => {\r\n    const {errors, profile, isSubmitting} = props\r\n    return (\r\n        <div className={s.profileDataForm}>\r\n            <Form className={s.loginForm}>\r\n                <ItemList label='Personal information'>\r\n                    <FormField name='fullName' error={errors.fullName}/>\r\n                    <FormField name='aboutMe' labelText='about Me' error={errors.aboutMe} inputTeg='textarea'/>\r\n                    <FormField name='lookingForAJobDescription' labelText='skills'\r\n                               error={errors.lookingForAJobDescription} inputTeg='textarea'/>\r\n                </ItemList>\r\n                <ItemList label='Contacts'>\r\n                    {Object.keys(profile.contacts).map(keyName => (\r\n                        <FormField labelText={keyName} name={`contacts.${keyName}`}\r\n                                   placeholder={keyName} error={errors[keyName as keyof FormikValuesType] as string}/>)\r\n                    )}\r\n                </ItemList>\r\n                <button className={button.button} type=\"submit\" disabled={isSubmitting}>Save</button>\r\n                <div className={s.APIError}>\r\n                </div>\r\n            </Form>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default ProfileDataForm;","import {withFormik} from \"formik\";\r\nimport {ContactsType, ProfileType} from \"../../../../redux/reducers/profileReducer\";\r\nimport ProfileDataForm from \"./profileDataForm\";\r\n\r\nexport type FormikValuesType = {\r\n    fullName: string\r\n    aboutMe: string\r\n    lookingForAJobDescription: string\r\n    lookingForAJob: true\r\n    contacts: ContactsType\r\n}\r\nexport type FormikPropsType = {\r\n    profile: ProfileType\r\n    onEditOff: () => void\r\n    setProfileInformation: (profile: ProfileType) => void\r\n}\r\nconst ProfileDataFormContainer = withFormik<FormikPropsType, FormikValuesType>({\r\n    mapPropsToValues: ({profile}) => {\r\n        return {\r\n            fullName: profile.fullName,\r\n            aboutMe: profile.aboutMe,\r\n            lookingForAJobDescription: profile.lookingForAJobDescription,\r\n            lookingForAJob: true,\r\n            contacts: profile.contacts,\r\n        }\r\n    },\r\n    validateOnBlur: true,\r\n    validateOnChange: false,\r\n    handleSubmit: (values, formikBag) => {\r\n        formikBag.props.setProfileInformation({...formikBag.props.profile, ...values})\r\n        formikBag.props.onEditOff()\r\n    }\r\n\r\n})(ProfileDataForm)\r\nexport default ProfileDataFormContainer","import React, {FC, useState} from 'react';\r\nimport s from './profileInfo.module.css';\r\nimport Preloader from \"../../common/preloader/preloader\";\r\nimport StatusContainer from \"./status/statusContainer\";\r\nimport Avatar from \"./avatar/avatar\";\r\nimport ProfileData from \"./profileData/profileData\";\r\nimport {ProfileInfoPropsType} from \"./profileInfoContainer\";\r\nimport ProfileDataFormContainer from \"./profileDataForm/profileDataFormContainer\";\r\n\r\n\r\nconst ProfileInfo:FC<ProfileInfoPropsType> = (props) => {\r\n    const [editorMode, setEditorMode] = useState(false);\r\n    const profile = props.isOwner ? props.ownerProfile : props.profile\r\n    if (props.isFetching || profile === null) {\r\n        return <Preloader/>\r\n    } else {\r\n        return (\r\n            <div className={s.profile_info}>\r\n                <Avatar saveImage={props.saveImage} photo={profile?.photos.large} isOwner={props.isOwner} />\r\n                {\r\n                    editorMode ? <ProfileDataFormContainer setProfileInformation={props.setProfileInformation}\r\n                            onEditOff={() => setEditorMode(false)} profile={profile} />\r\n                        : <ProfileData isOwner={props.isOwner} onEdit={() => setEditorMode(true)} profile={profile} />\r\n                }\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default ProfileInfo;","import {connect} from \"react-redux\";\r\nimport ProfileInfo from \"./profileInfo\";\r\nimport {getIsFetching, getIsOwner, getOwnerProfile, getProfile} from \"../../../redux/selectors/profileSelectors\";\r\nimport {ProfileType, saveImage, setProfileInformation} from \"../../../redux/reducers/profileReducer\";\r\nimport {StateType} from \"../../../redux/reduxStore\";\r\n\r\ntype OwnPropsType = {\r\n    profile:ProfileType | null\r\n    ownerProfile:ProfileType | null\r\n}\r\ntype MapStatePropsType = {\r\n    isFetching: boolean\r\n    isOwner: boolean\r\n}\r\ntype MapDispatchPropsType = {\r\n    saveImage: (photoURL:File) => void\r\n    setProfileInformation: (profile: ProfileType) => void\r\n}\r\nexport type ProfileInfoPropsType = MapStatePropsType & MapDispatchPropsType & OwnPropsType\r\n\r\nconst mapStateToProps = (state: StateType): MapStatePropsType => ({\r\n    isFetching: getIsFetching(state),\r\n    isOwner: getIsOwner(state),\r\n})\r\n\r\nconst ProfileInfoContainer = connect<MapStatePropsType, MapDispatchPropsType, {}, StateType>\r\n(mapStateToProps, {saveImage, setProfileInformation})(ProfileInfo);\r\n\r\nexport default ProfileInfoContainer;","import React, {FC, useEffect} from 'react';\r\nimport s from './profile.module.css';\r\nimport AddPostContainer from \"./addPost/addPostContainer\";\r\nimport PostsContainer from \"./posts/postsContainer\";\r\nimport ProfileInfoContainer from \"./profileInfo/profileInfoContainer\";\r\nimport {Redirect} from \"react-router-dom\";\r\nimport {ProfilePropsType} from \"./profileContainer\";\r\n\r\nconst Profile:FC<ProfilePropsType> = (props) => {\r\n    const userId:number | null = +props.match.params.userId || props.myUserId;\r\n    useEffect(() => {\r\n        if (userId && userId !== props.profile?.userId && userId !== props.myUserId) {\r\n            props.getStatus(userId)\r\n            props.requestProfileInformation(userId);\r\n        }else if(userId === props.myUserId && props.ownerProfile){\r\n\r\n        }\r\n\r\n        if(userId === props.myUserId){\r\n            props.setIsOwner(true)\r\n        }else{\r\n            props.setIsOwner(false)\r\n        }\r\n    }, [userId])\r\n    if (!userId) {\r\n        return <Redirect to='/login'/>;\r\n    } else {\r\n        return (\r\n            <div className={s.profile}>\r\n                <ProfileInfoContainer ownerProfile={props.ownerProfile} profile={props.profile}/>\r\n                <AddPostContainer/>\r\n                <PostsContainer/>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Profile;","import {connect} from \"react-redux\";\r\nimport {withRouter,RouteComponentProps} from 'react-router-dom';\r\nimport Profile from \"./profile\";\r\nimport {\r\n    requestProfileInformation,\r\n    getStatus,\r\n    actions as profileActions,\r\n    ProfileType\r\n} from \"../../redux/reducers/profileReducer\";\r\nimport {compose} from \"redux\";\r\nimport {getMyUserId} from \"../../redux/selectors/authSelectors\";\r\nimport {getIsOwner, getOwnerProfile, getProfile} from \"../../redux/selectors/profileSelectors\";\r\nimport {StateType} from \"../../redux/reduxStore\";\r\nconst {setIsOwner} = profileActions\r\n\r\ntype MapStatePropsType = {\r\n    myUserId: number | null\r\n    isOwner: boolean\r\n    profile: ProfileType | null\r\n    ownerProfile: ProfileType | null\r\n}\r\ntype MapDispatchPropsType = {\r\n    requestProfileInformation: (userId: number) => void\r\n    getStatus: (userId: number) => void\r\n    setIsOwner: (isOwner: boolean) => void\r\n}\r\nexport type ProfilePropsType = MapStatePropsType & MapDispatchPropsType & RouteComponentProps<{userId:string }>\r\nconst mapStateToProps = (state: StateType): MapStatePropsType => ({\r\n    myUserId: getMyUserId(state),\r\n    isOwner: getIsOwner(state),\r\n    profile: getProfile(state),\r\n    ownerProfile:getOwnerProfile(state)\r\n})\r\nexport default compose(\r\n    withRouter,\r\n    connect<MapStatePropsType, MapDispatchPropsType, {}, StateType>\r\n    (mapStateToProps, {requestProfileInformation, getStatus, setIsOwner})\r\n)(Profile)\r\n","import React, {FC} from 'react';\r\nimport s from './logon.module.css';\r\nimport button from '../../../commonStyle/button.module.css'\r\nimport avatar from '../../../assests/image/avatar.jpg'\r\n\r\ntype PropsType = {\r\n    userLogin:string | null\r\n    logout: () => void\r\n    smallPhotos: string | null | undefined\r\n}\r\nconst Logon:FC<PropsType> = (props) =>{\r\n    return(\r\n        <div className={s.logon}>\r\n\r\n            <div className={s.userLogin}>\r\n                <h3>{props.userLogin}</h3>\r\n            </div>\r\n            <div className={s.avatar}>\r\n                <img alt='avatar' src={props.smallPhotos || avatar} />\r\n            </div>\r\n            <div className={s.menu}>\r\n                <button className={button.button} onClick={props.logout}>logout</button>\r\n            </div>\r\n\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Logon;","import React, {FC} from 'react';\r\nimport s from './logout.module.css';\r\nimport button from '../../../commonStyle/button.module.css'\r\nimport {NavLink} from \"react-router-dom\";\r\n\r\ntype PropsType = {\r\n\r\n}\r\nconst Logout:FC<PropsType> = (props) => {\r\n    return (\r\n        <div className={s.logout}>\r\n            <NavLink to='/login'>\r\n                <button className={`${s.login} ${button.button}`}>Login</button>\r\n            </NavLink>\r\n            <button className={`${s.registration} ${button.button}`}>Registration</button>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Logout;","import React, {FC} from 'react';\r\nimport s from './header.module.css';\r\nimport Logon from \"./logon/logon\";\r\nimport Logout from \"./logout/logout\";\r\nimport {HeaderPropsType} from \"./headerContainer\";\r\n\r\nconst Header:FC<HeaderPropsType> = (props) =>{\r\n    return(\r\n        <header className={s.header}>\r\n            <div className={s.icon}>\r\n                <img src='https://e7.pngegg.com/pngimages/197/457/png-clipart-round-multicolored-logo-vanamo-logo-icons-logos-emojis-tech-companies.png'/>\r\n            </div>\r\n            {props.isAuth? <Logon smallPhotos={props.smallPhotos} userLogin={props.login} logout={props.logout}/> : <Logout />}\r\n        </header>\r\n    );\r\n}\r\n\r\nexport default Header;","import {DefaultOperationType, instance, ResultCodeCaptcha, ResultCodes} from \"./api\";\r\n\r\ntype MeDataType = {\r\n        id: number\r\n        email: string\r\n        login: string\r\n\r\n}\r\ntype LoginDataType = {\r\n        userId:number\r\n}\r\nexport const authAPI = {\r\n    me() {\r\n        return instance.get<DefaultOperationType<MeDataType>>('auth/me').then(response => response.data);\r\n    },\r\n\r\n    logout() {\r\n        return instance.delete<DefaultOperationType>('auth/login').then(response => response.data);\r\n    },\r\n\r\n    logon(email: string, password: string, rememberMe: boolean, captcha: string | null) {\r\n        return instance.post<DefaultOperationType<LoginDataType, ResultCodeCaptcha & ResultCodes>>('auth/login', {\r\n            email: email, password: password,\r\n            rememberMe: rememberMe, captcha: captcha\r\n        }).then(response => response.data);\r\n    },\r\n    getCaptcha() {\r\n        return instance.get<{url:string}>('security/get-captcha-url').then(response => response.data);\r\n    }\r\n}","import {authAPI} from \"../../api/authAPI\";\r\nimport {InferActionsTypes, StateType} from \"../reduxStore\";\r\nimport {ThunkAction} from \"redux-thunk\";\r\nimport {DefaultOperationType, ResultCodes} from \"../../api/api\";\r\nimport {actions as profileActions} from './profileReducer'\r\n\r\n\r\nconst SET_PROFILE_DATA = 'social/auth/SET-PROFILE-DATA', SET_CAPTCHA_URL = 'social/auth/SET-CAPTCHA-URL';\r\nconst initState = {\r\n    userId: null as number | null,\r\n    login: null as string | null,\r\n    email: null as string | null,\r\n    captchaURL: null as string | null,\r\n    isAuth: false\r\n}\r\ntype InitStateType = typeof initState;\r\ntype ActionsTypes = InferActionsTypes<typeof actions>\r\ntype ThunkType<T> = ThunkAction<T, StateType, unknown, ActionsTypes | InferActionsTypes<typeof profileActions>>\r\n\r\n\r\nconst authReducer = (state = initState, action: ActionsTypes): InitStateType => {\r\n    switch (action.type) {\r\n        case SET_PROFILE_DATA:\r\n            return {\r\n                ...state,\r\n                ...action.payload\r\n            }\r\n        case SET_CAPTCHA_URL:\r\n            return {\r\n                ...state,\r\n                ...action,\r\n            }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\nexport type SetProfileDataPayloadType = {\r\n    userId: number | null\r\n    email: string | null\r\n    login: string | null\r\n    isAuth: boolean\r\n}\r\n\r\nexport const actions = {\r\n    setProfileData: (payload: SetProfileDataPayloadType) => ({\r\n        type: SET_PROFILE_DATA, payload\r\n    } as const),\r\n\r\n    setCaptchaURL: (captchaURL: string) => ({type: SET_CAPTCHA_URL, captchaURL} as const)\r\n}\r\n\r\nexport const getCaptchaURL = (): ThunkType<void> => (dispatch) => {\r\n\r\n    authAPI.getCaptcha().then(data => {\r\n        dispatch(actions.setCaptchaURL(data.url));\r\n    })\r\n}\r\n\r\n\r\nexport const getProfileData = (): ThunkType<any> => (dispatch) => {\r\n    return authAPI.me().then((data) => {\r\n        if (data.resultCode === ResultCodes.Success) {\r\n            const {id, email, login} = data.data;\r\n            dispatch(actions.setProfileData({userId: id, email, login, isAuth: true}))\r\n        }\r\n        return data\r\n    });\r\n}\r\n\r\nexport const logout = (): ThunkType<void> => (dispatch) => {\r\n    authAPI.logout().then((data) => {\r\n        if (data.resultCode === 0) {\r\n            dispatch(actions.setProfileData({userId: null, email: null, login: null, isAuth: false}));\r\n            dispatch(profileActions.setIsOwner(false));\r\n        }\r\n\r\n    })\r\n}\r\nexport type LogonType = {\r\n    email: string\r\n    password: string\r\n    rememberMe: boolean\r\n    captcha: string | null\r\n}\r\nexport const logon = ({\r\n                          email, password, rememberMe, captcha = null\r\n                      }: LogonType): ThunkType<Promise<string | void>> => (dispatch) => {\r\n    return authAPI.logon(email, password, rememberMe, captcha).then((data) => {\r\n        if (data.resultCode === ResultCodes.Success) {\r\n            dispatch(getProfileData())\r\n        } else if (data.resultCode === ResultCodes.Error) {\r\n            return data.messages[0];\r\n        } else {\r\n            dispatch(getCaptchaURL());\r\n        }\r\n\r\n    })\r\n}\r\n\r\nexport default authReducer;","import Header from \"./header\";\r\nimport {connect} from \"react-redux\";\r\nimport {logout} from \"../../redux/reducers/authReducer\";\r\nimport {StateType} from \"../../redux/reduxStore\";\r\nimport {getIsAuth, getLogin} from \"../../redux/selectors/authSelectors\";\r\nimport {getPhotos} from \"../../redux/selectors/profileSelectors\";\r\n\r\ntype MapStatePropsType = {\r\n    isAuth:boolean\r\n    login:string | null\r\n    smallPhotos: string | undefined | null\r\n}\r\ntype MapDispatchPropsType = {\r\n    logout: () => void\r\n}\r\nexport type HeaderPropsType = MapStatePropsType & MapDispatchPropsType\r\nconst mapStateToProps = (state:StateType):MapStatePropsType => ({\r\n    isAuth:getIsAuth(state),\r\n    login:getLogin(state),\r\n    smallPhotos: getPhotos(state)?.small\r\n})\r\n\r\nconst HeaderContainer = connect<MapStatePropsType, MapDispatchPropsType,{},StateType>\r\n(mapStateToProps, {logout})(Header);\r\nexport default HeaderContainer;","import {getProfileData} from \"./authReducer\";\r\nimport {InferActionsTypes, StateType} from \"../reduxStore\";\r\nimport {ThunkAction} from \"redux-thunk\";\r\nimport {requestProfileInformation} from \"./profileReducer\";\r\n\r\nconst INITIALIZE = 'social/app/INITIALIZE';\r\n\r\nconst initState = {\r\n    initialized: false\r\n}\r\ntype InitStateType = typeof initState\r\ntype ActionsTypes = InferActionsTypes<typeof actions>\r\ntype ThunkType<T> = ThunkAction<T, StateType, unknown, ActionsTypes>\r\nconst appReducer = (state = initState, action: ActionsTypes): InitStateType => {\r\n    switch (action.type) {\r\n        case INITIALIZE:\r\n            return {\r\n                ...state,\r\n                initialized: true\r\n            }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\nexport const actions = {\r\n    initializedSuccess: () => ({type: INITIALIZE} as const)\r\n}\r\n\r\n\r\nexport const initialize = (): ThunkType<void> => async (dispatch) => {\r\n    await dispatch(getProfileData()).then((data: any) => {\r\n        if (data.resultCode === 0) {\r\n            return dispatch(requestProfileInformation(data.data.id, true))\r\n        }\r\n    })\r\n    dispatch(actions.initializedSuccess());\r\n}\r\n\r\nexport default appReducer;","import React, {FC} from 'react';\r\nimport s from './loginForm.module.css';\r\nimport {Form, FormikProps} from \"formik\";\r\nimport FormField from \"../../common/formField/formField\";\r\nimport {LoginFormikValuesType, LoginFormPropsType} from \"./loginFormContainer\";\r\n\r\nconst LoginForm:FC<LoginFormPropsType & FormikProps<LoginFormikValuesType>> = (props) => {\r\n    const {errors, isSubmitting} = props\r\n    return (\r\n                <Form className={s.loginForm}>\r\n                    <FormField type='email' name='email' error={errors.email}/>\r\n                    <FormField type='password' name='password' error={errors.password}/>\r\n                    {props.captchaURL ?\r\n                        <FormField labelText='' name='captcha' error={errors.password}\r\n                                   addComponent={<img alt='captcha' src={props.captchaURL}/>}/>\r\n                        : null\r\n                    }\r\n                    <button type=\"submit\" disabled={isSubmitting}>Login</button>\r\n                    <div className={s.APIError}>\r\n                        {// @ts-ignore\r\n                            errors.APIError}\r\n                    </div>\r\n                </Form>\r\n    );\r\n}\r\n\r\nexport default LoginForm;","import {connect} from \"react-redux\";\r\nimport LoginForm from \"./loginForm\";\r\nimport {logon, LogonType} from \"../../../redux/reducers/authReducer\";\r\nimport {getCaptchaURL} from \"../../../redux/selectors/authSelectors\";\r\nimport {StateType} from \"../../../redux/reduxStore\";\r\nimport {compose} from \"redux\";\r\nimport * as Yup from 'yup';\r\nimport {withFormik} from \"formik\";\r\n\r\n\r\ntype MapStatePropsType = {\r\n    captchaURL:string | null\r\n}\r\ntype MapDispatchPropsType = {\r\n    logon: (object:LogonType) => any\r\n}\r\nexport type LoginFormPropsType = MapStatePropsType & MapDispatchPropsType\r\n\r\nexport type LoginFormikValuesType = {\r\n    email: string\r\n    password: string\r\n    captcha: string\r\n    rememberMe: boolean\r\n}\r\nconst mapStateToProps = (state:StateType): MapStatePropsType =>({\r\n    captchaURL:getCaptchaURL(state)\r\n})\r\n\r\n\r\nconst LoginFormContainer = compose(\r\n\r\n    connect<MapStatePropsType, MapDispatchPropsType,{},StateType>\r\n(mapStateToProps, {logon}),\r\n\r\nwithFormik<LoginFormPropsType, LoginFormikValuesType>({\r\n    mapPropsToValues: () =>({\r\n        email: '',\r\n        password: '',\r\n        captcha: '',\r\n        rememberMe: false\r\n    }),\r\n    validateOnBlur: true,\r\n    validateOnChange: false,\r\n    validationSchema:Yup.object().shape({\r\n        email:Yup.string().email('Incorrect email').required('Required'),\r\n        password:Yup.string().required('Required')\r\n    }),\r\n    handleSubmit: (values, {props,setFieldValue,setSubmitting}) =>{\r\n        props.logon(values).then((error:string) => {\r\n            setFieldValue('APIError', error);\r\n        }).finally(() => setSubmitting(false))\r\n    }\r\n}))\r\n(LoginForm)\r\n\r\n\r\nexport default LoginFormContainer;","import React, {FC} from 'react';\r\nimport s from './login.module.css';\r\nimport LoginFormContainer from \"./loginForm/loginFormContainer\";\r\nimport {Redirect} from \"react-router-dom\";\r\nimport {LoginPropsType} from \"./loginContainer\";\r\n\r\nconst Login:FC<LoginPropsType> = (props) => {\r\n    if(props.isAuth) return <Redirect to='/profile' />\r\n\r\n    return (\r\n        <div className={s.login}>\r\n            <LoginFormContainer />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Login","import Login from \"./login\";\r\nimport {connect} from \"react-redux\";\r\nimport {getIsAuth} from \"../../redux/selectors/authSelectors\";\r\nimport {StateType} from \"../../redux/reduxStore\";\r\nimport React from \"react\";\r\n\r\ntype MapStatePropsType = {\r\n    isAuth: boolean\r\n}\r\nexport type LoginPropsType = MapStatePropsType\r\nconst mapStateToProps = (state:StateType):MapStatePropsType => ({\r\n    isAuth:getIsAuth(state)\r\n})\r\nconst LoginContainer = connect<MapStatePropsType, {},{}, StateType>(mapStateToProps)(Login);\r\nexport default LoginContainer;","import React, {FC, LegacyRef, RefObject, useEffect, useRef} from \"react\";\r\nimport Message from \"../../message/message\";\r\nimport s from './chatMessages.module.css'\r\nimport {MessageType} from \"../../../redux/reducers/chatReducer\";\r\n\r\n\r\nconst ChatMessages: FC<{ messages: MessageType[] }> = ({messages}) => {\r\n    const refScroll:LegacyRef<HTMLDivElement> | undefined = React.createRef()\r\n\r\n    useEffect(() =>{\r\n        refScroll.current?.scrollIntoView()\r\n    }, [messages])\r\n    return (\r\n        <div className={s.chatMessages}>\r\n            {\r\n                messages.map(m => {\r\n                    return (\r\n                        <Message className={s.message}  userId={m.userId}\r\n                                 name={m.userName} message={m.message} avatar={m.photo}/>\r\n                    )\r\n                })\r\n\r\n            }\r\n            <div ref={refScroll} />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ChatMessages","import React, {ChangeEvent, FC} from \"react\";\r\nimport s from './textarea.module.css'\r\n\r\ntype TextareaPropsType = {\r\n    value: string\r\n    className?: string\r\n    onChange?: (e: ChangeEvent<HTMLTextAreaElement>) => void\r\n    onEnter?: () => void\r\n}\r\nconst AutoSizeTextarea: FC<TextareaPropsType> = ({value, onChange, onEnter, className}) => {\r\n    const onChangeIn = (e: ChangeEvent<HTMLTextAreaElement>) => {\r\n        e.currentTarget.style.height = 'auto';\r\n        e.currentTarget.style.height = e.currentTarget.scrollHeight + 'px';\r\n        if (onChange) {\r\n            onChange(e)\r\n        }\r\n    }\r\n    const onKeyDown = (e: React.KeyboardEvent<HTMLTextAreaElement>) => {\r\n        if (e.key === 'Enter') {\r\n            if (!e.shiftKey && onEnter) {\r\n                onEnter()\r\n                e.preventDefault()\r\n            }\r\n        }\r\n    }\r\n    return (\r\n        <textarea onKeyDown={onKeyDown} className={`${s.textarea} ${className || ''}`} onChange={onChangeIn}\r\n                  value={value}/>\r\n    )\r\n}\r\n\r\nexport default AutoSizeTextarea","import {ChangeEvent, FC, useState} from \"react\";\r\nimport AutoSizeTextarea from \"../../common/textarea/textarea\";\r\nimport {ConnectStatusType} from \"../../../api/chatAPI\";\r\nimport button from '../../../commonStyle/button.module.css'\r\nimport s from './sendMessage.module.css'\r\n\r\ntype SendMessageFormType = {\r\n    sendMessage: (message: string) => void\r\n    status: ConnectStatusType\r\n}\r\nconst SendMessage: FC<SendMessageFormType> = ({sendMessage, status}) => {\r\n    const [message, setMessage] = useState('')\r\n    const onChange = (e:ChangeEvent<HTMLTextAreaElement>) =>{\r\n        setMessage(e.currentTarget.value)\r\n    }\r\n    const sendMessageIn = () =>{\r\n        setMessage('')\r\n        sendMessage(message)\r\n    }\r\n    return (\r\n        <div className={s.main}>\r\n            <AutoSizeTextarea className={s.textarea} onChange={onChange} onEnter={sendMessageIn} value={message}/>\r\n            <button className={button.button} disabled={status !== \"connected\"} onClick={sendMessageIn}>Send</button>\r\n        </div>\r\n    )\r\n}\r\nexport default SendMessage","import React, {ChangeEvent, FC, useEffect, useState} from \"react\";\r\nimport ChatMessages from \"./chatMessages/chatMessages\";\r\nimport {ChatPropsType} from \"./chatContainer\";\r\nimport AutoSizeTextarea from \"../common/textarea/textarea\";\r\nimport SendMessageForm from \"./sendMessage/sendMessage\";\r\n\r\n\r\nconst Chat:FC<ChatPropsType> = ({messages, startListeningMessages, sendMessage, status,stopListeningMessages}) =>{\r\n\r\n    useEffect(() =>{\r\n        startListeningMessages()\r\n        return stopListeningMessages\r\n    }, [])\r\n    return(\r\n        <div>\r\n            {status}\r\n            <ChatMessages messages={messages} />\r\n            <SendMessageForm  sendMessage={sendMessage} status={status} />\r\n        </div>\r\n    )\r\n}\r\nexport default Chat","import {MessageType} from \"../redux/reducers/chatReducer\";\r\n\r\nconst URL = 'wss://social-network.samuraijs.com/handlers/ChatHandler.ashx'\r\n\r\nexport type ConnectStatusType = 'connected' | 'connecting' | 'error' | 'disconnect'\r\ntype MessagesReceivedType = (messages: Array<MessageType>) => void\r\ntype StatusChangedType = (status: ConnectStatusType) => void\r\ntype SubscribesType = {\r\n    messagesReceived: Array<MessagesReceivedType>\r\n    statusChanged: Array<StatusChangedType>\r\n}\r\ntype EventType = keyof SubscribesType\r\n\r\n\r\nconst subscribes: SubscribesType = {\r\n    statusChanged: [],\r\n    messagesReceived: []\r\n}\r\n\r\nlet ws: WebSocket | null = null\r\nlet reconnect: NodeJS.Timeout | null = null;\r\nconst changeConnectStatus = (status: ConnectStatusType) => {\r\n    subscribes.statusChanged.forEach(h => h(status))\r\n}\r\nconst messageHandler = (e: MessageEvent) => {\r\n    const messages = JSON.parse(e.data)\r\n    subscribes.messagesReceived.forEach(h => h(messages))\r\n}\r\nconst closeHandler = (e: CloseEvent) => {\r\n    changeConnectStatus('disconnect')\r\n    setTimeout(chatAPI.start, 3000)\r\n}\r\nconst openHandler = () => {\r\n    changeConnectStatus('connected')\r\n}\r\nconst errorHandler = () => {\r\n    changeConnectStatus('error')\r\n}\r\nconst cleanUp = () => {\r\n    if (ws) {\r\n        ws.removeEventListener(\"message\", messageHandler)\r\n        ws.removeEventListener(\"close\", closeHandler)\r\n        ws.removeEventListener(\"open\", openHandler)\r\n    }\r\n}\r\n\r\nexport const chatAPI = {\r\n    stop() {\r\n        subscribes.statusChanged = []\r\n        subscribes.messagesReceived = []\r\n        cleanUp()\r\n        ws?.close()\r\n        ws = null\r\n    },\r\n    start() {\r\n        changeConnectStatus('connecting')\r\n        cleanUp()\r\n        ws = new WebSocket(URL)\r\n        ws.addEventListener(\"message\", messageHandler)\r\n        ws.addEventListener(\"open\", openHandler)\r\n        ws.addEventListener(\"close\", closeHandler)\r\n        ws.addEventListener(\"error\", errorHandler)\r\n\r\n    },\r\n    subscribeEvent(Event: EventType, callback: MessagesReceivedType | StatusChangedType) {\r\n        // @ts-ignore\r\n        subscribes[Event].push(callback)\r\n    },\r\n    unSubscribeEvent(Event: EventType, callback: MessagesReceivedType | StatusChangedType) {\r\n        // @ts-ignore\r\n        subscribes[Event].splice(subscribes[Event].indexOf(callback), 1)\r\n    },\r\n    sendMessage(message: string) {\r\n        ws?.send(message)\r\n    }\r\n\r\n}\r\n","import {InferActionsTypes, StateType} from \"../reduxStore\";\r\nimport {ThunkAction} from \"redux-thunk\";\r\nimport {chatAPI, ConnectStatusType} from \"../../api/chatAPI\";\r\n\r\nconst SET_MESSAGE = 'social/chat/SET-MESSAGE', STATUS_CHANGE = 'social/chat/STATUS-CHANGE', DELETE_MESSAGES='social/chat/DELETE-MESSAGES';\r\nexport type MessageType = {\r\n    message: string\r\n    photo: string\r\n    userId: number\r\n    userName: string\r\n}\r\nconst initState = {\r\n    messages: [] as Array<MessageType>,\r\n    status:'disconnect' as ConnectStatusType\r\n}\r\ntype InitStateType = typeof initState\r\ntype ActionsTypes = InferActionsTypes<typeof actions>\r\ntype ThunkType<T> = ThunkAction<T, StateType, unknown, ActionsTypes>\r\nconst chatReducer = (state = initState, action: ActionsTypes): InitStateType => {\r\n    switch (action.type) {\r\n        case SET_MESSAGE:\r\n            return {\r\n                ...state,\r\n                messages: [...state.messages, ...action.messages]\r\n            }\r\n        case STATUS_CHANGE:\r\n            return{\r\n                ...state,\r\n                status: action.status\r\n            }\r\n        case DELETE_MESSAGES:\r\n            return{\r\n                ...state,\r\n                messages: []\r\n            }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\nexport const actions = {\r\n    setMessages: (messages:Array<MessageType>) => ({type: SET_MESSAGE, messages} as const),\r\n    statusChange: (status:ConnectStatusType) => ({type: STATUS_CHANGE, status} as const),\r\n    deleteMessages:() =>({type:DELETE_MESSAGES} as const)\r\n}\r\n\r\n\r\nexport const startListeningMessages = (): ThunkType<void> => async (dispatch) => {\r\n    chatAPI.subscribeEvent(\"statusChanged\", (status:ConnectStatusType) =>{\r\n        dispatch(actions.statusChange(status))\r\n    })\r\n    chatAPI.start()\r\n    chatAPI.subscribeEvent(\"messagesReceived\", (messages:Array<MessageType>) =>{\r\n        dispatch(actions.setMessages(messages))\r\n    })\r\n\r\n}\r\nexport const stopListeningMessages = (): ThunkType<void> => async (dispatch) => {\r\n    chatAPI.stop()\r\n    debugger;\r\n    dispatch(actions.deleteMessages())\r\n}\r\nexport const sendMessage = (message:string): ThunkType<void> => async (dispatch) =>{\r\n    chatAPI.sendMessage(message)\r\n}\r\n\r\nexport default chatReducer;","import {StateType} from \"../reduxStore\";\r\n\r\n\r\nexport const getChatMessages = (state:StateType) =>{\r\n    return state.chat.messages\r\n}\r\nexport const getConnectStatus = (state:StateType) =>{\r\n    return state.chat.status\r\n}","import {\r\n    MessageType,\r\n    startListeningMessages,\r\n    sendMessage,\r\n    stopListeningMessages\r\n} from \"../../redux/reducers/chatReducer\";\r\nimport {connect} from \"react-redux\";\r\nimport Chat from \"./chat\";\r\nimport {StateType} from \"../../redux/reduxStore\";\r\nimport {getChatMessages, getConnectStatus} from \"../../redux/selectors/chatSelectors\";\r\nimport {ConnectStatusType} from \"../../api/chatAPI\";\r\n\r\ntype MapPropsType = {\r\n    messages:Array<MessageType>\r\n    status:ConnectStatusType\r\n}\r\ntype MapDispatchType = {\r\n    startListeningMessages: () => void\r\n    stopListeningMessages:() => void\r\n    sendMessage: (message:string) => void\r\n}\r\nexport type ChatPropsType = MapPropsType & MapDispatchType\r\nconst MapStateToProps = (state:StateType):MapPropsType =>({\r\n    messages:getChatMessages(state),\r\n    status:getConnectStatus(state)\r\n})\r\n\r\n\r\nconst ChatContainer = connect<MapPropsType, MapDispatchType, {}, StateType>(MapStateToProps,\r\n    { startListeningMessages, stopListeningMessages, sendMessage})(Chat)\r\nexport default ChatContainer","import './App.css';\nimport Navbar from \"./components/navbar/navbar\";\nimport {Route} from 'react-router-dom';\nimport DialogsContainer from \"./components/dialogs/dialogsContainer\";\nimport UsersContainer from \"./components/users/usersContainer\";\nimport ProfileContainer from \"./components/profile/profileContainer\";\nimport HeaderContainer from \"./components/header/headerContainer\";\nimport {Component} from \"react\";\nimport {compose} from \"redux\";\nimport {connect} from \"react-redux\";\nimport {initialize} from \"./redux/reducers/appReducer\";\nimport Preloader from \"./components/common/preloader/preloader\";\nimport LoginContainer from \"./components/login/loginContainer\";\nimport Chat from \"./components/chat/chat\";\nimport ChatContainer from \"./components/chat/chatContainer\";\n\nclass App extends Component {\n    componentDidMount() {\n        this.props.initialize();\n    }\n\n    render() {\n        if(!this.props.initialized) return <Preloader />\n        return (\n            <div className='App'>\n                <HeaderContainer/>\n                <Navbar/>\n                <div className='content'>\n                    <Route path='/dialogs' component={DialogsContainer}/>\n                    <Route path='/profile/:userId?' component={ProfileContainer}/>\n                    <Route path='/users' component={UsersContainer}/>\n                    <Route path='/login' component={LoginContainer}/>\n                    <Route path='/chat' component={ChatContainer}/>\n                </div>\n            </div>\n        );\n    }\n}\nconst mapStateToProps = (state) =>({\n    initialized: state.app.initialized\n})\nexport default compose(\n    connect(mapStateToProps, {initialize})\n)(App);\n","import {Action, applyMiddleware, combineReducers, createStore} from 'redux';\r\nimport profileReducer, {actions as profileActions} from \"./reducers/profileReducer\";\r\nimport dialogsReducer from \"./reducers/dialogsReducer\";\r\nimport usersReducer from \"./reducers/usersReducer\";\r\nimport authReducer from \"./reducers/authReducer\";\r\nimport thunkMiddleWare, {ThunkAction} from 'redux-thunk';\r\nimport appReducer from \"./reducers/appReducer\";\r\nimport chatReducer from \"./reducers/chatReducer\";\r\nlet rootReducer = combineReducers({\r\n    profilePage: profileReducer,\r\n    dialogsPage: dialogsReducer,\r\n    usersPage: usersReducer,\r\n    auth:authReducer,\r\n    app:appReducer,\r\n    chat:chatReducer\r\n})\r\ntype rootReducerType = typeof rootReducer\r\nexport type StateType = ReturnType<rootReducerType>\r\nlet store = createStore(rootReducer, applyMiddleware(thunkMiddleWare));\r\n\r\ntype PropertiesType<T> = T extends {[key :string] :  infer U} ? U : never\r\nexport type InferActionsTypes<T extends {[key:string]: (...args: any) => any}> = ReturnType<PropertiesType<T>>\r\n\r\n\r\n// @ts-ignore\r\nwindow.store = store;\r\n\r\nexport default store;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport store from './redux/reduxStore';\nimport {Provider} from \"react-redux\";\nimport {BrowserRouter} from \"react-router-dom\";\n\nReactDOM.render(\n    <React.StrictMode>\n        <BrowserRouter>\n\n            <Provider store={store}>\n                <App store={store}/>\n            </Provider>\n        </BrowserRouter>\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\n\n\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"main\":\"message_main__2A2Hp\",\"avatar\":\"message_avatar__3k1CJ\",\"me\":\"message_me__yc7QH\",\"message\":\"message_message__143Dw\",\"notMe\":\"message_notMe__2GJ24\",\"newMessage\":\"message_newMessage__3jlTn\",\"name\":\"message_name__11n5h\",\"scale\":\"message_scale__1bjPU\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"input\":\"formField_input__3UMwI\",\"textarea\":\"formField_textarea__2ZdBu\",\"field\":\"formField_field__X-8fm\",\"formField\":\"formField_formField__180Fu\",\"errorIcon\":\"formField_errorIcon__3AHf-\",\"errorMessage\":\"formField_errorMessage__3FRiS\",\"label\":\"formField_label__CY4uW\",\"content\":\"formField_content__2LAuE\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"pagination\":\"pagination_pagination__ath4W\",\"pageNumbers\":\"pagination_pageNumbers__3P2I5\",\"pageNumber\":\"pagination_pageNumber__250d8\",\"active\":\"pagination_active__VagPV\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"avatar\":\"user_avatar__23hb6\",\"user\":\"user_user__3lGn_\",\"name\":\"user_name__HvLUn\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"logon\":\"logon_logon__3Nky3\",\"avatar\":\"logon_avatar__2676T\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"main\":\"chat_main__3cj8k\",\"avatar\":\"chat_avatar__3ssfy\",\"chat_name\":\"chat_chat_name__q6SSs\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"avatar\":\"avatar_avatar__2rOvh\",\"avatarSettings\":\"avatar_avatarSettings__2eWRU\",\"uploadFile\":\"avatar_uploadFile__20ba6\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"loginForm\":\"profileDataForm_loginForm__3tiaF\",\"profileDataForm\":\"profileDataForm_profileDataForm__evRJp\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"logout\":\"logout_logout__3_g-Z\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"main\":\"dialogs_main__1fhtb\",\"chats\":\"dialogs_chats__l1pWy\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"likes\":\"post_likes__2V2RY\",\"main\":\"post_main__3Si4N\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"profileData\":\"profileData_profileData__-ZTgS\",\"contact\":\"profileData_contact__22zJo\",\"infoItem\":\"profileData_infoItem__h34qX\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"itemList\":\"itemList_itemList__NoNK-\",\"items\":\"itemList_items__oh8b0\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"header_header__2tX34\",\"icon\":\"header_icon__1dBpx\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"loginForm\":\"loginForm_loginForm__2uAyW\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"chatMessages\":\"chatMessages_chatMessages__3xFVG\",\"message\":\"chatMessages_message__2iuet\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"main\":\"sendMessage_main__2aHTT\",\"textarea\":\"sendMessage_textarea__rw41D\"};"],"sourceRoot":""}